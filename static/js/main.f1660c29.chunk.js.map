{"version":3,"sources":["serviceWorker.js","hooks/websocket.js","components/Home.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","MESSAGE","useWebSocket","useState","macAddress","setMacAddress","timestampStart","setTimestampStart","timestampEnd","setTimestampEnd","macAddresses","setMacAddresses","generateDiagramText","setGenerateDiagramText","_useWebSocket","onMessage","event","JSON","parse","data","message","sendMessage","readyState","sendJsonMessage","lastMessage","lastJsonMessage","fetchMacAddresses","getWebSocket","useCallback","stringify","generateDiagram","isOpen","ReadyState","OPEN","Home","useWebsocket","Grid","container","direction","justify","alignItems","style","width","height","Button","variant","color","startIcon","Refresh","onClick","Select","value","onChange","target","minWidth","map","index","MenuItem","key","Share","App","CssBaseline","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uFCbAC,EACiB,sBADjBA,EAEc,mBAgELC,EA7DM,WAAM,MAEWC,mBAAS,gBAFpB,mBAElBC,EAFkB,KAENC,EAFM,OAGmBF,mBAAS,GAH5B,mBAGlBG,EAHkB,KAGFC,EAHE,OAIeJ,mBAAS,GAJxB,mBAIlBK,EAJkB,KAIJC,EAJI,OAKeN,mBAAS,CAAC,iBALzB,mBAKlBO,EALkB,KAKJC,EALI,OAM6BR,mBACpD,6BAPuB,mBAMlBS,EANkB,KAMGC,EANH,OAwBrBC,IA/Ba,kCA+Ba,CAC5BC,UAfqB,SAACC,GAAW,IAAD,EACNC,KAAKC,MAAMF,EAAMG,MAAnCC,EADwB,EACxBA,QAASD,EADe,EACfA,KAEbC,IAAYnB,EAA6BU,EAAgBQ,GACpDC,IAAYnB,GAA0BY,EAAuBM,MAItEE,EAlBuB,EAkBvBA,YAIAC,GAtBuB,EAmBvBC,gBAnBuB,EAoBvBC,YApBuB,EAqBvBC,gBArBuB,EAsBvBH,YAMII,GA5BmB,EAuBvBC,aAKwBC,uBAAY,WACpCP,EACEJ,KAAKY,UAAU,CACbT,QAASnB,EACTkB,KAAM,UAGT,KAEGW,EAAkBF,uBAAY,WAClCP,EACEJ,KAAKY,UAAU,CACbT,QAASnB,EACTkB,KAAM,CAAEf,aAAYE,iBAAgBE,qBAGvC,IAEH,MAAO,CACLJ,aACAC,gBACAC,iBACAC,oBACAC,eACAC,kBACAC,eACAE,sBACAc,oBACAI,kBACAC,OAAQT,IAAeU,aAAWC,OCCvBC,MA7Df,WAAiB,IAAD,EAYVC,IAVF/B,EAFY,EAEZA,WACAC,EAHY,EAGZA,cAKAK,GARY,EAIZJ,eAJY,EAKZC,kBALY,EAMZC,aANY,EAOZC,gBAPY,EAQZC,cACAE,EATY,EASZA,oBACAc,EAVY,EAUZA,kBACAI,EAXY,EAWZA,gBAGF,OAEE,kBAACM,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,eACRC,WAAW,SACXC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAEhC,oDACA,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,gBAAgBE,MAAO,CAAEC,MAAO,MACtD,kBAACE,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAACC,EAAA,EAAD,MACXC,QAASvB,GAJX,SAQA,kBAACwB,EAAA,EAAD,CACEC,MAAO/C,EACPgD,SAAU,SAACpC,GAAD,OAAWX,EAAcW,EAAMqC,OAAOF,QAChDV,MAAO,CAAEa,SAAU,MAElB5C,EAAa6C,KAAI,SAACJ,EAAOK,GAAR,OAChB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOL,MAAOA,GAC1BA,QAKT,iEACA,kBAACP,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAACY,EAAA,EAAD,MACXV,QAASnB,GAJX,YAQA,2BACE,2BAAIlB,MCjDGgD,MATf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QCHNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJ4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.f1660c29.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { useState, useCallback } from \"react\";\r\nimport _useWebSocket, { ReadyState } from \"react-use-websocket\";\r\n\r\nconst SERVER_URL = \"ws://localhost:43968/websocket/\";\r\n\r\nconst MESSAGE = {\r\n  FETCH_MAC_ADDRESSES: \"Fetch MAC Addresses\",\r\n  GENERATE_DIAGRAM: \"Generate Diagram\",\r\n};\r\n\r\nconst useWebSocket = () => {\r\n  // TODO: Send JSON message with data time frame\r\n  const [macAddress, setMacAddress] = useState(\"default test\");\r\n  const [timestampStart, setTimestampStart] = useState(0);\r\n  const [timestampEnd, setTimestampEnd] = useState(0);\r\n  const [macAddresses, setMacAddresses] = useState([\"default test\"]);\r\n  const [generateDiagramText, setGenerateDiagramText] = useState(\r\n    \"Diagram not yet generated\"\r\n  );\r\n\r\n  const receiveMessage = (event) => {\r\n    const { message, data } = JSON.parse(event.data);\r\n\r\n    if (message === MESSAGE.FETCH_MAC_ADDRESSES) setMacAddresses(data);\r\n    else if (message === MESSAGE.GENERATE_DIAGRAM) setGenerateDiagramText(data);\r\n  };\r\n\r\n  const {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage,\r\n    lastJsonMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  } = _useWebSocket(SERVER_URL, {\r\n    onMessage: receiveMessage,\r\n  });\r\n\r\n  const fetchMacAddresses = useCallback(() => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        message: MESSAGE.FETCH_MAC_ADDRESSES,\r\n        data: null,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const generateDiagram = useCallback(() => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        message: MESSAGE.GENERATE_DIAGRAM,\r\n        data: { macAddress, timestampStart, timestampEnd },\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  return {\r\n    macAddress,\r\n    setMacAddress,\r\n    timestampStart,\r\n    setTimestampStart,\r\n    timestampEnd,\r\n    setTimestampEnd,\r\n    macAddresses,\r\n    generateDiagramText,\r\n    fetchMacAddresses,\r\n    generateDiagram,\r\n    isOpen: readyState === ReadyState.OPEN,\r\n  };\r\n};\r\n\r\nexport default useWebSocket;\r\n","import React from \"react\";\r\n\r\nimport { Grid, MenuItem, Select, Button } from \"@material-ui/core\";\r\nimport { Refresh, Share } from \"@material-ui/icons/\";\r\n\r\nimport useWebsocket from \"../hooks/websocket\";\r\n\r\nfunction Home() {\r\n  const {\r\n    macAddress,\r\n    setMacAddress,\r\n    timestampStart,\r\n    setTimestampStart,\r\n    timestampEnd,\r\n    setTimestampEnd,\r\n    macAddresses,\r\n    generateDiagramText,\r\n    fetchMacAddresses,\r\n    generateDiagram,\r\n  } = useWebsocket();\r\n\r\n  return (\r\n    // TODO: Inputs for datetime start and end\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"space-evenly\"\r\n      alignItems=\"center\"\r\n      style={{ width: \"auto\", height: \"auto\" }}\r\n    >\r\n      <h2>Select a MAC Address</h2>\r\n      <Grid container justify=\"space-between\" style={{ width: 325 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<Refresh />}\r\n          onClick={fetchMacAddresses}\r\n        >\r\n          Fetch\r\n        </Button>\r\n        <Select\r\n          value={macAddress}\r\n          onChange={(event) => setMacAddress(event.target.value)}\r\n          style={{ minWidth: 215 }}\r\n        >\r\n          {macAddresses.map((value, index) => (\r\n            <MenuItem key={index} value={value}>\r\n              {value}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </Grid>\r\n      <h2>Generate Business Process Diagram</h2>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<Share />}\r\n        onClick={generateDiagram}\r\n      >\r\n        Generate\r\n      </Button>\r\n      <p>\r\n        <i>{generateDiagramText}</i>\r\n      </p>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Home from \"./Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Home />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}